CREATE DATABASE Attendace;
USE Attendace;
-- Table for User Profiles
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    user_type ENUM('student', 'teacher', 'administrator') NOT NULL
);

-- Table for Students
CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL,
    dob DATE NOT NULL,
    gender ENUM('male', 'female', 'other') NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    address VARCHAR(200) NOT NULL,
    session VARCHAR(100) NOT NULL,
    program VARCHAR(100) NOT NULL,
    semester VARCHAR(100) NOT NULL
);

-- Table for Teachers
CREATE TABLE teachers (
    teacher_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dob DATE NOT NULL,
    gender ENUM('male', 'female', 'other') NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    degree VARCHAR(100) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL,
    address VARCHAR(200) NOT NULL
);

-- Table for Classes or Subjects
CREATE TABLE subjects (
    subject_id INT AUTO_INCREMENT PRIMARY KEY,
    subject_name VARCHAR(100) NOT NULL,
    teacher_id INT,
    field VARCHAR(50) NOT NULL,
    semester VARCHAR(100) NOT NULL,
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id)
);

-- Table for Attendance Records
CREATE TABLE attendance_records (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    subject_id INT,
    attendance_status ENUM('present', 'absent') NOT NULL,
    date DATE NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)
);

-- Add user_id column to students table
ALTER TABLE students
ADD COLUMN user_id INT,
ADD FOREIGN KEY (user_id) REFERENCES users(user_id);

-- Add user_id column to teachers table
ALTER TABLE teachers
ADD COLUMN user_id INT,
ADD FOREIGN KEY (user_id) REFERENCES users(user_id);

-- Insert values into the 'users' table
INSERT INTO users (user_id, username, password, user_type)
VALUES
    (001 ,'student1', 'password1', 'student'),
    (002, 'student2', 'password2', 'student'),
    (101, 'teacher1', 'password3', 'teacher'),
    (102, 'teacher2', 'password4', 'teacher'),
    (201, 'admin1', 'password5', 'administrator');

-- Insert values into the 'students' table
INSERT INTO students (user_id, student_name, dob, gender, email, phone, address, session, program, semester)
VALUES
    (001, 'John Doe', '2000-01-15', 'male', 'john.doe@email.com', '123-456-7890', '123 Main St', '2023A', 'Computer Science', 'Spring 2023'),
    (002, 'Alice Smith', '1999-05-20', 'female', 'alice.smith@email.com', '987-654-3210', '456 Elm St', '2023B', 'Biology', 'Spring 2023');

-- Insert values into the 'teachers' table
INSERT INTO teachers (user_id, first_name, last_name, dob, gender, email, phone, degree, salary, address)
VALUES
    (101, 'Professor', 'Johnson', '1975-08-10', 'male', 'prof.johnson@email.com', '555-123-4567', 'Ph.D. in Chemistry', 60000.00, '789 Oak Ave'),
    (102, 'Dr. Mary', 'White', '1980-03-25', 'female', 'dr.mary.white@email.com', '777-987-6543', 'M.Sc. in Physics', 55000.00, '101 Pine St');

-- Insert values into the 'subjects' table
INSERT INTO subjects (subject_id, subject_name, field, semester)
VALUES
    (1101, 'Math 101', 'Mathematics', 'Spring 2023'),
    (1102, 'Chemistry 202', 'Chemistry', 'Spring 2023'),
    (1103, 'Biology 301', 'Biology', 'Spring 2023');

-- Insert values into the 'attendance_records' table
-- Assuming user_id and subject_id values correspond to existing users and subjects
INSERT INTO attendance_records (user_id, subject_id, attendance_status, date)
VALUES
    (001, 1101, 'present', '2023-11-01'),
    (002, 1102, 'absent', '2023-11-01');
    
CREATE VIEW student_subjects_view AS
SELECT
    s.student_name AS StudentName,
    s.program AS Program,
    t.first_name AS TeacherFirstName,
    t.last_name AS TeacherLastName,
    sub.subject_name AS SubjectName
FROM students s
JOIN attendance_records ar ON s.user_id = ar.user_id
JOIN subjects sub ON ar.subject_id = sub.subject_id
JOIN teachers t ON sub.teacher_id = t.teacher_id;

-- using select operation
SELECT * FROM students WHERE session = '2023A';

-- using delete operation
DELETE FROM students WHERE student_id = 001;
SELECT * FROM students;

-- using update operation
UPDATE teachers
SET email = 'newemail@example.com'
WHERE teacher_id = 101;
SELECT * FROM teachers;

-- other operations
SELECT * FROM teachers
WHERE salary = (SELECT MAX(salary) FROM teachers);

/*
-- Drop all views
DROP VIEW IF EXISTS student_subjects_view;

-- Drop all tables
DROP TABLE IF EXISTS attendance_records;
DROP TABLE IF EXISTS subjects;
DROP TABLE IF EXISTS students;
DROP TABLE IF EXISTS teachers;
DROP TABLE IF EXISTS users;

-- Drop the database "Attendace"
DROP DATABASE IF EXISTS Attendance;
*/
